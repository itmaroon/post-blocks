{"version":3,"file":"front-module.js","mappings":"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","sources":["webpack://post-blocks/external window [\"wp\",\"apiFetch\"]","webpack://post-blocks/external window [\"wp\",\"date\"]","webpack://post-blocks/webpack/bootstrap","webpack://post-blocks/webpack/runtime/compat get default export","webpack://post-blocks/webpack/runtime/define property getters","webpack://post-blocks/webpack/runtime/hasOwnProperty shorthand","webpack://post-blocks/./assets/front-module.js"],"sourcesContent":["module.exports = window[\"wp\"][\"apiFetch\"];","module.exports = window[\"wp\"][\"date\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import apiFetch from \"@wordpress/api-fetch\";\r\nimport {\r\n\tdateI18n, // 日付をフォーマットし、サイトのロケールに変換\r\n\tformat, // 日付のフォーマット\r\n} from \"@wordpress/date\";\r\n\r\n// プロミスを格納する配列\r\nconst promises = [];\r\n\r\nconst getBlockMapValue = (blockMap, fieldName) => {\r\n\t//blockMapのキーが.で区切られている場合は、最後の.の後の文字列から\r\n\tfor (const key in blockMap) {\r\n\t\tif (key.includes(\".\")) {\r\n\t\t\tconst lastDotIndex = key.lastIndexOf(\".\");\r\n\t\t\tconst keyFieldName = key.slice(lastDotIndex + 1);\r\n\t\t\tif (keyFieldName === fieldName) {\r\n\t\t\t\treturn blockMap[key];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn blockMap[fieldName];\r\n};\r\n\r\n//カスタムフィールドを検索する関数\r\nconst searchFieldObjects = (obj, fieldKey) => {\r\n\tlet result = null;\r\n\r\n\tfor (const key in obj) {\r\n\t\tif (key === fieldKey) {\r\n\t\t\tresult = obj[key];\r\n\t\t\tbreak;\r\n\t\t} else if (typeof obj[key] === \"object\") {\r\n\t\t\tconst nestedResult = searchFieldObjects(obj[key], fieldKey);\r\n\t\t\tif (nestedResult !== null) {\r\n\t\t\t\tresult = nestedResult;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\n//RestAPIで投稿データを取得する関数（Promiseを返す）\r\nconst getEntityRecordsFromAPI = (entity, query) => {\r\n\tconst path = `/wp/v2/${entity}`;\r\n\tconst queryString = Object.entries(query)\r\n\t\t.map(([key, value]) => `${key}=${value}`)\r\n\t\t.join(\"&\");\r\n\r\n\treturn apiFetch({ path: `${path}?${queryString}` });\r\n};\r\n\r\n//RestAPIでメディア情報を取得する関数（Promiseを返す）\r\nconst getMediaInfoFromAPI = async (mediaId) => {\r\n\tconst path = `/wp/v2/media/${mediaId}`;\r\n\tconst mediaInfo = await apiFetch({ path });\r\n\treturn mediaInfo;\r\n};\r\n\r\nconst getSelectedTaxonomyTerms = (choiceTerms, taxRelateType) => {\r\n\tconst taxonomyTerms = choiceTerms.reduce((acc, { taxonomy, term }) => {\r\n\t\tif (taxonomy === \"category\") {\r\n\t\t\tif (acc.hasOwnProperty(\"categories\")) {\r\n\t\t\t\tacc[\"categories\"] = `${acc[\"categories\"]},${term.id}`;\r\n\t\t\t} else {\r\n\t\t\t\tacc[\"categories\"] = term.id;\r\n\t\t\t}\r\n\t\t} else if (taxonomy === \"post_tag\") {\r\n\t\t\tif (acc.hasOwnProperty(\"tags\")) {\r\n\t\t\t\tacc[\"tags\"] = `${acc[\"tags\"]},${term.id}`;\r\n\t\t\t} else {\r\n\t\t\t\tacc[\"tags\"] = term.id;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (acc.hasOwnProperty(taxonomy)) {\r\n\t\t\t\tacc[taxonomy] = `${acc[taxonomy]},${term.id}`;\r\n\t\t\t} else {\r\n\t\t\t\tacc[taxonomy] = term.id;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn acc;\r\n\t}, {});\r\n\r\n\treturn {\r\n\t\t...taxonomyTerms,\r\n\t\ttax_relation: taxRelateType,\r\n\t};\r\n};\r\n\r\nconst ModifyFieldElement = (element, post, blockMap) => {\r\n\t// newPostUnitのすべての子要素を取得\r\n\tconst allElements = element.getElementsByTagName(\"*\");\r\n\r\n\t// 各要素を反復処理\r\n\tfor (let i = 0; i < allElements.length; i++) {\r\n\t\tconst element = allElements[i];\r\n\r\n\t\t// 要素のクラス名を取得\r\n\t\tconst classNames = element.className.split(\" \");\r\n\r\n\t\t// field_を含むクラス名があるかチェック\r\n\t\tconst hasFieldClass = classNames.some((className) =>\r\n\t\t\tclassName.startsWith(\"field_\"),\r\n\t\t);\r\n\r\n\t\tif (hasFieldClass) {\r\n\t\t\t// field_を含むクラス名がある場合、そのクラス内のDOM要素を書き換える\r\n\t\t\tconst fieldClassName = classNames.find((className) =>\r\n\t\t\t\tclassName.startsWith(\"field_\"),\r\n\t\t\t);\r\n\t\t\t// field_を除いたクラス名を取得\r\n\t\t\tconst fieldName = fieldClassName.replace(\"field_\", \"\");\r\n\t\t\t// postオブジェクト内で、そのクラス名をキーとする値を取得\r\n\r\n\t\t\t//カスタムフィールドの値取得\r\n\t\t\tconst costumFieldValue = searchFieldObjects(\r\n\t\t\t\t{ ...post.acf, ...post.meta },\r\n\t\t\t\tfieldName,\r\n\t\t\t);\r\n\t\t\t//ビルトインのフィールド名があればその値をとり、なければカスタムフィールドの値をとる\r\n\t\t\tconst fieldValue = post[fieldName] || costumFieldValue;\r\n\t\t\t//フィールドとブロックの対応マップからブロック名を抽出\r\n\t\t\tconst blockName = getBlockMapValue(blockMap, fieldName);\r\n\t\t\t//フィールドの種類によって書き換え方が変わる\r\n\t\t\tswitch (blockName) {\r\n\t\t\t\tcase \"itmar/design-title\":\r\n\t\t\t\t\tconst hElement = element.querySelector(\"h1, h2, h3, h4, h5, h6\");\r\n\t\t\t\t\tif (hElement) {\r\n\t\t\t\t\t\t// h要素内のdivを探す\r\n\t\t\t\t\t\tconst divElement = hElement.querySelector(\"div\");\r\n\t\t\t\t\t\tconsole.log(fieldValue);\r\n\t\t\t\t\t\tif (divElement) {\r\n\t\t\t\t\t\t\t// divのテキストノードを書き換える\r\n\t\t\t\t\t\t\tif (fieldName === \"date\") {\r\n\t\t\t\t\t\t\t\tdivElement.textContent = dateI18n(\"Y.n.j\", fieldValue);\r\n\t\t\t\t\t\t\t} else if (fieldName === \"title\") {\r\n\t\t\t\t\t\t\t\tdivElement.textContent = fieldValue.rendered;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tdivElement.textContent = fieldValue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"core/paragraph\":\r\n\t\t\t\t\t// pの内容を書き換える\r\n\t\t\t\t\telement.innerHTML = fieldValue.rendered;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"core/image\":\r\n\t\t\t\t\tif (!fieldValue) break; //mediaIDがセットされていなければ終了\r\n\t\t\t\t\tconst iElement = element.querySelector(\"img\");\r\n\t\t\t\t\tif (iElement) {\r\n\t\t\t\t\t\tpromises.push(\r\n\t\t\t\t\t\t\tgetMediaInfoFromAPI(fieldValue)\r\n\t\t\t\t\t\t\t\t.then((data) => {\r\n\t\t\t\t\t\t\t\t\t// 必要なデータを抽出\r\n\t\t\t\t\t\t\t\t\tconst newSrc = data.source_url;\r\n\t\t\t\t\t\t\t\t\tconst newSrcset = Object.entries(data.media_details.sizes)\r\n\t\t\t\t\t\t\t\t\t\t.map(([name, size]) => `${size.source_url} ${size.width}w`)\r\n\t\t\t\t\t\t\t\t\t\t.join(\", \");\r\n\t\t\t\t\t\t\t\t\tconst newWidth = data.media_details.width;\r\n\t\t\t\t\t\t\t\t\tconst newHeight = data.media_details.height;\r\n\t\t\t\t\t\t\t\t\tconst newAlt = data.alt_text;\r\n\t\t\t\t\t\t\t\t\t// 現在のmediaIdを取得\r\n\t\t\t\t\t\t\t\t\tconst currentMediaId = iElement.classList\r\n\t\t\t\t\t\t\t\t\t\t.toString()\r\n\t\t\t\t\t\t\t\t\t\t.match(/wp-image-(\\d+)/)[1];\r\n\r\n\t\t\t\t\t\t\t\t\t// img要素の属性を更新\r\n\t\t\t\t\t\t\t\t\tiElement.src = newSrc;\r\n\t\t\t\t\t\t\t\t\tiElement.srcset = newSrcset;\r\n\t\t\t\t\t\t\t\t\tiElement.width = newWidth;\r\n\t\t\t\t\t\t\t\t\tiElement.height = newHeight;\r\n\t\t\t\t\t\t\t\t\tiElement.alt = newAlt;\r\n\t\t\t\t\t\t\t\t\t// クラス名を更新\r\n\t\t\t\t\t\t\t\t\tiElement.classList.remove(`wp-image-${currentMediaId}`);\r\n\t\t\t\t\t\t\t\t\tiElement.classList.add(`wp-image-${fieldValue}`);\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t.catch((error) => console.error(error)),\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n\t//PickUp Postの親要素を取得\r\n\tconst pickupElement = document.querySelectorAll(\r\n\t\t\".wp-block-itmar-pickup-posts\",\r\n\t);\r\n\r\n\t//エディタで設定された属性をdatasetで受け取ってクエリーの結果を取得\r\n\tpickupElement.forEach((pickup) => {\r\n\t\tconst numberOfItems = pickup.dataset.number_of_items;\r\n\t\tconst selectedRest = pickup.dataset.selected_rest;\r\n\t\tconst taxRelateType = pickup.dataset.tax_relate_type;\r\n\t\tconst choiceTerms = JSON.parse(pickup.dataset.choice_terms);\r\n\t\tconst blockMap = JSON.parse(pickup.dataset.block_map);\r\n\t\t//タームのセレクトオブジェクト\r\n\t\tconst selectTerms = getSelectedTaxonomyTerms(choiceTerms, taxRelateType);\r\n\t\t//RestAPIで結果を取得\r\n\t\tgetEntityRecordsFromAPI(selectedRest, {\r\n\t\t\tper_page: numberOfItems,\r\n\t\t\t...selectTerms,\r\n\t\t})\r\n\t\t\t.then((data) => {\r\n\t\t\t\tconst postUnits = pickup.querySelectorAll(\".post_unit\")[0];\r\n\t\t\t\tif (!postUnits) return; //post_unitクラスの要素がなければリターン\r\n\r\n\t\t\t\tconst postDivs = postUnits.children;\r\n\t\t\t\tconst divElements = Array.from(postDivs);\r\n\t\t\t\tdivElements.forEach((divs, index) => {\r\n\t\t\t\t\t//レンダリング指定のあるフィールドの内容をpostの内容によって書き換え\r\n\t\t\t\t\tModifyFieldElement(divs, data[index], blockMap);\r\n\t\t\t\t});\r\n\t\t\t\t// すべてのプロミスが完了したら非表示のクラスを外す\r\n\t\t\t\tPromise.all(promises)\r\n\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\tconst postUnits = document.querySelectorAll(\".post_unit\");\r\n\t\t\t\t\t\tpostUnits.forEach((unit) => {\r\n\t\t\t\t\t\t\t//非表示のクラスを外す\r\n\t\t\t\t\t\t\tunit.classList.remove(\"unit_hide\");\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch((error) => console.error(error));\r\n\t\t\t})\r\n\t\t\t.catch((error) => console.error(error));\r\n\t});\r\n});\r\n"],"names":["module","exports","window","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","promises","getBlockMapValue","blockMap","fieldName","includes","lastDotIndex","lastIndexOf","slice","searchFieldObjects","fieldKey","result","nestedResult","getMediaInfoFromAPI","async","path","mediaId","apiFetch","document","addEventListener","querySelectorAll","forEach","pickup","numberOfItems","dataset","number_of_items","selectedRest","selected_rest","taxRelateType","tax_relate_type","choiceTerms","JSON","parse","choice_terms","block_map","selectTerms","getSelectedTaxonomyTerms","reduce","acc","taxonomy","term","id","tax_relation","getEntityRecordsFromAPI","entity","query","queryString","entries","map","value","join","per_page","then","data","postUnits","postDivs","children","Array","from","divs","index","ModifyFieldElement","element","post","allElements","getElementsByTagName","i","length","classNames","className","split","some","startsWith","find","replace","costumFieldValue","acf","meta","fieldValue","hElement","querySelector","divElement","console","log","textContent","dateI18n","rendered","innerHTML","iElement","push","newSrc","source_url","newSrcset","media_details","sizes","name","size","width","newWidth","newHeight","height","newAlt","alt_text","currentMediaId","classList","toString","match","src","srcset","alt","remove","add","catch","error","Promise","all","unit"],"sourceRoot":""}